name: Deploy
on:
  push:
    branches:
      - main
  workflow_dispatch: # Manual trigger
env:
  AWS_REGION: "eu-central-1"
  AWS_ACCOUNT_ID: "168029731319"

permissions:
  contents: read # This is required for actions/checkout

jobs:
  build:
    runs-on: [ ubuntu-latest ]
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build Project
        run: mvn clean package -DskipTests

      - uses: actions/upload-artifact@v4
        with:
          name: app
          path: target

  deploy:
    needs: 
      - build
    runs-on: [ ubuntu-latest ]
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        id: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          output-credentials: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - uses: actions/download-artifact@v4
        with:
          name: app
          path: target

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          REPOSITORY: fon-automatizacija
        run: |
          ls -lh target/
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          
          echo "image=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fetch ecs task definition
        run: |
          aws ecs describe-task-definition --task-definition fon-automatizacija --region $AWS_REGION | jq '.taskDefinition' > springboot-app-task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: springboot-app-task-definition.json
          container-name: fon-automatizacija-container
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: fon-automatizacija-service
          cluster: fon-automatizacija-cluster
          wait-for-service-stability: true
